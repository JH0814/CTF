from pwn import *
from z3 import *
from sage.all import *

context.log_level = 'error'

data = bytes.fromhex
compare = [int.from_bytes(data[i:i+4], 'little') for i in range(0, len(data), 4)]
assert len(compare) == 24*24

key = [ord(c) for c in "C0D3GAT3"]

mod = 0xffff
elf = ELF('./prob')
data = elf.read(0x3220, 0x900)
add_table1 = [int.from_bytes(data[i:i+4], 'little') for i in range(0, 0x900, 4)]
data = elf.read(0x3b20, 0x900)
add_table2 = [int.from_bytes(data[i:i+4], 'little') for i in range(0, 0x900, 4)]
data = elf.read(0x4d20, 0x900)
mul_table = [int.from_bytes(data[i:i+4], 'little') for i in range(0, 0x900, 4)]

arr = [0 for _ in range(576)]
r1 = 0
r2 = 0
for i in range(12):
    if i & 1 != 0:
        arr[24 * (23 - i) + i] = 1
        r1 = 23 - i
        r2 = 24 * i
    else:
        arr[25 * i] = 1
        r1 = 23 - i
        r2 = 24 * r1
    arr[r1 + r2] = 1

def inv_add1(a1, table):
    res = [0 for _ in range(24*24)]
    for i in range(24):
        for j in range(24):
            res[i*24 + j] = (a1[24*i + j] - table[24*i + j]) % 0xffff
    return res

def inv_add2(a1, table):
    res = [0 for _ in range(24*24)]
    for i in range(24):
        for j in range(24):
            res[i*24 + j] = (a1[24*i + j] - table[24*i + j]) & 0xffff
    return res

def right(Y, A):
    Y = [Y[i:i+24] for i in range(0, len(Y), 24)]
    Y = Matrix(IntegerModRing(mod), Y)
    A = [A[i:i+24] for i in range(0, len(A), 24)]
    A = Matrix(IntegerModRing(mod), A)

    X = A.solve_right(Y)
    res = X.list()
    return [ i % mod for i in res ]

def left(Y, A):
    Y = [Y[i:i+24] for i in range(0, len(Y), 24)]
    Y = Matrix(IntegerModRing(mod), Y)
    A = [A[i:i+24] for i in range(0, len(A), 24)]
    A = Matrix(IntegerModRing(mod), A)

    X = A.solve_left(Y)
    res = X.list()
    return [ i % mod for i in res ]

def inv_clockwise(matrix):
    res = matrix[:]
    for i in range(12):
        for j in range(i, 23 - i):
            temp = res[i * 24 + j]
            res[i * 24 + j] = res[j * 24 + (23 - i)]
            res[j * 24 + (23 - i)] = res[(23 - i) * 24 + (23 - j)]
            res[(23 - i) * 24 + (23 - j)] = res[(23 - j) * 24 + i]
            res[(23 - j) * 24 + i] = temp
    return res[:]

def inv_counterclockwise(matrix):
    res = matrix[:]
    for i in range(12):
        for j in range(i, 23 - i):
            temp = res[j * 24 + i]
            res[j * 24 + i] = res[(23 - i) * 24 + j]
            res[(23 - i) * 24 + j] = res[(23 - j) * 24 + (23 - i)]
            res[(23 - j) * 24 + (23 - i)] = res[i * 24 + (23 - j)]
            res[i * 24 + (23 - j)] = temp
    return res[:]


def z3solve(res):
    s = Solver()
    arr_z3 = [0 for _ in range(676)]
    a1 = [Int(f'a{i}') for i in range(484)]
    for var in a1:
        s.add(var >= 0x20)
        s.add(var < 0x7f)
    idx = 0
    for i in range(2, 24):
        for j in range(2, 24):
            arr_z3[26 * i + j] = a1[idx]
            idx += 1
    for i in range(1, 25):
        for j in range(1, 25):
            if arr_z3[26 * i + j] == 0:
                arr_z3[26 * i + j] = key[(i + j - 2) % 8]
    # for i in range(0, 26*26, 26):
    #     print(arr_z3[i:i+26])
    for i in range(24):
        for j in range(24):
            form = (
                arr_z3[26 * (i+2) + j+2] +
                arr_z3[26 * (i+2) + j+1] +
                arr_z3[26 * (i+2) + j+0] +
                arr_z3[26 * (i+1) + j+2] +
                arr_z3[26 * (i+1) + j+1] +
                arr_z3[26 * (i+1) + j+0] +
                arr_z3[26 * (i+0) + j+2] +
                arr_z3[26 * (i+0) + j+1] +
                arr_z3[26 * (i+0) + j+0]
            ) % 0x100000000
            # print(form)
            s.add(res[24 * i + j] == form)
    assert s.check() == sat
    m = s.model()
    return [m[a1[i]].as_long() for i in range(484)]

res = inv_add2(compare, add_table2)
res = left(res, mul_table)
res = inv_add1(res, add_table1)
res = inv_counterclockwise(res)
res = right(res, arr[:])
res = left(res, arr[:])
res = inv_clockwise(res)
# print(res)
flag = z3solve(res)
print(''.join(chr(i) for i in flag))